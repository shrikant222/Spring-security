package org.beta.loginregistration.configration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        // Lambda-based Spring Security configuration
        http.csrf(AbstractHttpConfigurer::disable) // Disabling CSRF protection
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/signup/**", "/login/**").permitAll() // Public endpoints
                        .requestMatchers("/admin/**").hasRole("ADMIN")         // Role-based access
                        .anyRequest().authenticated()                          // All other endpoints require authentication
                )
                .sessionManagement(session -> session
                        .maximumSessions(1)                // Only one session per user
                        .maxSessionsPreventsLogin(true)    // Prevents new login if max sessions are reached
                )
                .httpBasic(withDefaults()); // Enable Basic Authentication

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        // Using BCryptPasswordEncoder with a strength parameter of 10
        return new BCryptPasswordEncoder(10);
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
}
